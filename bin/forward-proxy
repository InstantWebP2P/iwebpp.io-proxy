#!/usr/bin/env node

//
// Please install node-httpp binary in your system exec dir, like /usr/bin/ or /usr/local/bin/
//
var util  = require('util'),
    argv = require('optimist').argv,
    Proxy = require('../proxy');

var help = [
    "usage: forward-proxy [options] ",
    "",
    "Starts a forward-proxy server using the specified command-line options",
    "",
    "options:",
    "      --http_port     51866            Http proxy port, Optional",
    "      --socks_port    51888            Socks proxy port, Optional",
    "      --export_vurl   URL              Export service's vURL, Optional",
    "      --enable_export 1 or 0           Turn on export service, Optional",
    "      --access_local  1 or 0           Local access on Export host, 1: allow, 0: deny, default deny it",
    "  -k, --key           User key         Key for the registered user, MUST",
    "  -s  --secmode       ssl or acl       Secure mode: ssl or host-based ACL",
    "  -u, --user          USER             User to drop privileges once server socket is bound, Optional",
    "  -h, --help                           You're staring at it"
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2) {
  return util.puts(help);
}

var http_port = argv.http_port,
    socks_port =  argv.socks_port,
    export_vurl = argv.export_vurl,
    enable_export = argv.enable || argv.enable_export,
    access_local = argv.access || argv.access_local,
    secmode = argv.s || argv.secmode,
    user = argv.u || argv.user,
    usrkey = argv.k || argv.key;

//
// Check arguments
//
if (!(http_port || socks_port) && !enable_export) {
    http_port = 51866;
    socks_port = 51888;
}
if ((http_port || socks_port) && !export_vurl) {
    util.puts('Please pass Export service vURL by --export_vurl xxx');
    return util.puts(help);
}

//
// Create the server with the specified options
//

// fill Export service's vURL as options.export
var srv = new Proxy({export: export_vurl, usrkey: usrkey, 
                     secmode: secmode, access_local: access_local}, function(err, proxy){
    if (err || !proxy) {
        console.log(err+',create proxy failed');
        return 
    }
    var nmcln = srv.nmcln;
    var importApp = proxy.importApp;
    var exportApp = proxy.exportApp;

    // start socks proxy service
    if (socks_port) {
	    var socks = require('socks5');
	    var sockspxySrv = socks.createServer(importApp.socksApp);
	    
	    sockspxySrv.listen(socks_port, 50);
	    
	    sockspxySrv.on('error', function (e) {
	        console.error('SERVER ERROR: %j', e);
		    if (e.code == 'EADDRINUSE') {
		        console.log('Address in use, retrying in 10 seconds...');
		        setTimeout(function () {
		            console.log('Reconnecting to %s:%s', HOST, PORT);
		            sockspxySrv.close();
		            sockspxySrv.listen(socks_port, 50);
		        }, 10000);
		    }
	    });
	    
	    console.log('Socks forward proxy server listen on port '+socks_port);
    }
    
    // start http proxy service
    if (http_port) {
	    var http = require('http');
	    var pxySrv = http.createServer();
	    
	    pxySrv.on('request', importApp.httpApp.proxy);
	    pxySrv.on('connect', importApp.httpApp.tunnel);
	    
	    pxySrv.listen(http_port, '0.0.0.0', 50);
	    
	    console.log('Http forwar proxy server listen on port '+http_port);
    }
    
    // start export service on name-client
    if (enable_export) {
	    nmcln.bsrv.srv.on('request', exportApp.httpApp.proxy);
	    nmcln.bsrv.srv.on('connect', exportApp.httpApp.tunnel);
	        
	    console.log('Export service ready on vURL: '+nmcln.vurl+'\nUsrkey: '+nmcln.usrinfo.usrkey);
    }
});

//
// Drop privileges if requested
//
if (typeof user === 'string') {
    process.setuid(user);
}

